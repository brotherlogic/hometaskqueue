// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HomeTaskQueueServiceClient is the client API for HomeTaskQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeTaskQueueServiceClient interface {
	AddQueue(ctx context.Context, in *AddQueueRequest, opts ...grpc.CallOption) (*AddQueueResponse, error)
	GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*GetTasksResponse, error)
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
}

type homeTaskQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeTaskQueueServiceClient(cc grpc.ClientConnInterface) HomeTaskQueueServiceClient {
	return &homeTaskQueueServiceClient{cc}
}

func (c *homeTaskQueueServiceClient) AddQueue(ctx context.Context, in *AddQueueRequest, opts ...grpc.CallOption) (*AddQueueResponse, error) {
	out := new(AddQueueResponse)
	err := c.cc.Invoke(ctx, "/hometaskqueue.HomeTaskQueueService/AddQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeTaskQueueServiceClient) GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*GetTasksResponse, error) {
	out := new(GetTasksResponse)
	err := c.cc.Invoke(ctx, "/hometaskqueue.HomeTaskQueueService/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeTaskQueueServiceClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, "/hometaskqueue.HomeTaskQueueService/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeTaskQueueServiceServer is the server API for HomeTaskQueueService service.
// All implementations should embed UnimplementedHomeTaskQueueServiceServer
// for forward compatibility
type HomeTaskQueueServiceServer interface {
	AddQueue(context.Context, *AddQueueRequest) (*AddQueueResponse, error)
	GetTasks(context.Context, *GetTasksRequest) (*GetTasksResponse, error)
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
}

// UnimplementedHomeTaskQueueServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHomeTaskQueueServiceServer struct {
}

func (UnimplementedHomeTaskQueueServiceServer) AddQueue(context.Context, *AddQueueRequest) (*AddQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQueue not implemented")
}
func (UnimplementedHomeTaskQueueServiceServer) GetTasks(context.Context, *GetTasksRequest) (*GetTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedHomeTaskQueueServiceServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}

// UnsafeHomeTaskQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeTaskQueueServiceServer will
// result in compilation errors.
type UnsafeHomeTaskQueueServiceServer interface {
	mustEmbedUnimplementedHomeTaskQueueServiceServer()
}

func RegisterHomeTaskQueueServiceServer(s grpc.ServiceRegistrar, srv HomeTaskQueueServiceServer) {
	s.RegisterService(&_HomeTaskQueueService_serviceDesc, srv)
}

func _HomeTaskQueueService_AddQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeTaskQueueServiceServer).AddQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hometaskqueue.HomeTaskQueueService/AddQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeTaskQueueServiceServer).AddQueue(ctx, req.(*AddQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeTaskQueueService_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeTaskQueueServiceServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hometaskqueue.HomeTaskQueueService/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeTaskQueueServiceServer).GetTasks(ctx, req.(*GetTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeTaskQueueService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeTaskQueueServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hometaskqueue.HomeTaskQueueService/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeTaskQueueServiceServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HomeTaskQueueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hometaskqueue.HomeTaskQueueService",
	HandlerType: (*HomeTaskQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddQueue",
			Handler:    _HomeTaskQueueService_AddQueue_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _HomeTaskQueueService_GetTasks_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _HomeTaskQueueService_AddTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hometaskqueue.proto",
}
